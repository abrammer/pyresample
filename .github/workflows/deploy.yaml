name: Deploy sdist and wheels

on:
  push:

jobs:
  build_sdist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Create sdist
        shell: bash -l {0}
        run: |
          python -m pip install -q build
          python -m build -s

      - name: Upload sdist to build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: sdist
          path: dist/*.tar.gz


  build_wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
        python-version: [3.6, 3.7, 3.8, 3.9]
        include:
          # Using pythons inside a docker image to provide all the Linux
          # python-versions permutations.
          - name: manylinux 64-bit
            os: ubuntu-latest
            python-version: 3.8
            docker-image: manylinux1_x86_64
          - name: manylinux 32-bit
            os: ubuntu-latest
            python-version: 3.8
            docker-image: manylinux1_i686

    steps:
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install -U -q pip Cython wheel setuptools twine numpy build

      - name: Build and install macOS/Windows wheel
        if: matrix.os != 'ubuntu-latest'
        run: |
          python -m build -w

      - name: Build Linux wheels inside docker
        if: matrix.os == 'ubuntu-latest'
        run: |
          docker run \
            -e PLAT=${{ matrix.docker-image }} \
            -e USE_OMP=1 \
            -v `pwd`:/io \
            quay.io/pypa/${{ matrix.docker-image }} \
            /io/continuous_integration/build-manylinux-wheels.sh

      - name: test wheel version
        if:  matrix.docker-image != 'manylinux1_i686'
        run: |
          mv pyresample unused_src_to_prevent_local_import
          python -m pip install --find-links=./dist/ pyresample
          python -c "import pyresample; print(pyresample.__file__, pyresample.__version__)"
          python -c "import pyresample; assert 'unknown' not in pyresample.__version__"

      - name: Upload wheel(s) as build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist/*.whl

